var h=Object.defineProperty,p=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var g=Object.getOwnPropertySymbols;var m=Object.prototype.hasOwnProperty,w=Object.prototype.propertyIsEnumerable;var C=(e,t,n)=>t in e?h(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))m.call(t,n)&&C(e,n,t[n]);if(g)for(var n of g(t))w.call(t,n)&&C(e,n,t[n]);return e},u=(e,t)=>p(e,y(t));import{c8 as A,cb as $,cc as i,cd as l,V as r}from"./index.a4b71a83.js";const o=A(),B=$("clientes",{state:()=>({clientes:[],cliente:{}}),getters:{getClientes:e=>e.clientes,getOnlyRuts:e=>e.clientes.map(t=>t.rut_cliente),getClientesSelect:e=>e.clientes.map(t=>u(d({},t),{label:`${t.nombre_cliente} ${t.appat_cliente} ${t.apmat_cliente}`,value:t.rut_cliente}))},actions:{async getAllClientes(){const e=await o.getToken;if(e=="")return this.clientes;const{data:t}=await i.get("/clientes",{headers:{Authorization:`Bearer ${e}`}});console.log("getAllClientes ACTIONS: ",t),this.clientes=t},async getClienteById(e){const t=await o.getToken,{data:n}=await i.get(`/clientes/${e}`,{headers:{Authorization:`Bearer ${t}`}});console.log(n),this.cliente=n},async createCliente(e){const t=await o.getToken;await i.post("/clientes/add/",e,{headers:{Authorization:`Bearer ${t}`}}).then(n=>{l.create({message:`Cliente ${n.data.rut_cliente} creado exitosamente!`,type:"positive",actions:[{label:"Cerrar",color:"white"}]}),console.log(n)}).catch(n=>{l.create({message:n.response.data.message,type:"negative",actions:[{label:"Cerrar",color:"white"}]}),console.log("Error",n.response.data.message)}),this.getAllClientes()},async updateCliente(e,t){const n=await o.getToken;console.log("updateCliente actions:",e,t),await i.put(`clientes/update/${e}`,t,{headers:{Authorization:`Bearer ${n}`}}).then(a=>{l.create({message:`Cliente ${a.data.rut_cliente} actualizado exitosamente!`,type:"positive",actions:[{label:"Cerrar",color:"white"}]}),console.log(a)}).catch(a=>{l.create({message:a.response.data.errors[0].message,type:"negative",actions:[{label:"Cerrar",color:"white"}]}),console.log("Error",a.response.data.message)}),this.getAllClientes()},async deleteCliente(e){const t=await o.getToken;await i.delete(`clientes/delete/${e}`,{headers:{Authorization:`Bearer ${t}`}}).then(({data:n})=>{l.create({message:`Cliente ${n.rut_cliente} eliminado exitosamente!`,type:"negative",caption:"Cuidado al eliminar!",progress:!0,actions:[{label:"Cerrar",color:"white"}]}),this.clientes=this.clientes.filter(a=>a.rut_cliente!==e),console.log("deleteCliente ACTIONS: ",n)}).catch(n=>{console.log("deleteCliente ACTIONS: ",n.response.data.message),l.create({message:n.response.data.message,type:"negative",actions:[{label:"Cerrar",color:"white"}]}),console.log("Error",n.response.data.message)}),this.getAllClientes()}}}),f=()=>{const e=B();return{getAllClientes:async()=>{await e.getAllClientes()},getClienteById:async s=>{await e.getClienteById(s)},createCliente:async s=>{console.log("createCliente useCliente: ",s),await e.createCliente(s)},updateCliente:async(s,c)=>{console.log("updateCliente useCliente: ",s,c),await e.updateCliente(s,c)},deleteCliente:async s=>{console.log("deleteCliente useCliente: ",s),await e.deleteCliente(s)},getClienteByRut:s=>e.getClientes.find(c=>c.rut_cliente==s),getClientes:r(()=>e.getClientes),getOnlyRuts:r(()=>e.getOnlyRuts),getClientesSelect:r(()=>e.getClientesSelect)}};export{f as u};
