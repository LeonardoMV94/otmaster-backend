var d=Object.defineProperty,M=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var v=Object.getOwnPropertySymbols;var h=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;var l=(s,a,i)=>a in s?d(s,a,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[a]=i,D=(s,a)=>{for(var i in a||(a={}))h.call(a,i)&&l(s,i,a[i]);if(v)for(var i of v(a))u.call(a,i)&&l(s,i,a[i]);return s},g=(s,a)=>M(s,m(a));import{c8 as A,cb as y,cc as c,V as p}from"./index.6afc27b2.js";import{c as e}from"./Notifications.3fd28b16.js";const r=A(),w=y("MarcasDispositivos",{state:()=>({marcasDispositivos:[],marcaDispositivo:{}}),getters:{getMarcasDispositivos:s=>s.marcasDispositivos,getMarcaDispositivo:s=>s.marcaDispositivo,getMDSelect:s=>s.marcasDispositivos.map(a=>g(D({},a),{label:a.nombre_marca,value:a.id_marca}))},actions:{async getAllsMarcaDispositivos(){const s=await r.getToken;if(s=="")return this.marcasDispositivos;const{data:a}=await c.get("/marcas-dispositivos/",{headers:{Authorization:`Bearer ${s}`}});console.log("getAllsMarcaDispositivos ACTIONS: ",a),this.marcasDispositivos=a},async getMarcaDispositivoById(s){const a=await r.getToken,{data:i}=await c.get(`/marcas-dispositivos/${s}`,{headers:{Authorization:`Bearer ${a}`}});console.log(i),this.marcaDispositivo=i},async createMarcasDispositivo(s){const a=r.getToken;await c.post("/marcas-dispositivos/add/",s,{headers:{Authorization:`Bearer ${a}`}}).then(i=>{e(`Marca Dispositivo ${i.data.id_marca} creado exitosamente!`,"positive"),console.log(i)}).catch(i=>{e(i.response.data.errors[0].message,"negative"),console.log("Error",i.response.data.message)}),this.getAllsMarcaDispositivos()},async updateMarcaDispositivo(s,a){const i=await r.getToken;console.log("updateMD actions:",s,a),await c.patch(`marcas-dispositivos/update/${s}`,a,{headers:{Authorization:`Bearer ${i}`}}).then(t=>{e(`Marca Dispositivo ${t.data.id_marca} actualizado exitosamente!`,"positive"),console.log(t)}).catch(t=>{e(t.response.data.errors[0].message,"negative"),console.log("Error",t.response.data.message)}),this.getAllsMarcaDispositivos()},async deleteMarcaDispositivo(s){const a=await r.getToken;await c.delete(`marcas-dispositivos/delete/${s}`,{headers:{Authorization:`Bearer ${a}`}}).then(({data:i})=>{e(`Tipo Dispositivo ${i.id_marca} eliminado exitosamente!`,"positive"),this.marcasDispositivos=this.marcasDispositivos.filter(t=>t.id_marca!==s),console.log("deleteMD ACTIONS: ",i)}).catch(i=>{console.log("deleteMD ACTIONS: ",i.response.data.message),e(i.response.data.message,"negative"),console.log("Error",i.response.data.message)}),this.getAllsMarcaDispositivos()}}}),I=()=>{const s=w();return{getAllMarcaDispositivos:async()=>{await s.getAllsMarcaDispositivos()},getMarcaDispositivoById:async o=>{await s.getTDById(o)},createMarcaDispositivo:async o=>{console.log("createMarcaDispositivo ",o),await s.createMarcasDispositivo(o)},updateMarcaDispositivo:async(o,n)=>{console.log("updateMarcaDispositivo",o,n),await s.updateMarcaDispositivo(o,n)},deleteMarcaDispositivo:async o=>{console.log("deleteMarcaDispositivo useMarcaDispositivo: ",o),await s.deleteMarcaDispositivo(o)},getMarcasDispositivos:p(()=>s.getMarcasDispositivos),getMarcaDispositivo:p(()=>s.getMarcaDispositivo),getMDtoSelect:p(()=>s.getMDSelect)}};export{I as u};
