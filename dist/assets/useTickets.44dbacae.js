var u=Object.defineProperty,h=Object.defineProperties;var p=Object.getOwnPropertyDescriptors;var k=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var d=(t,e,s)=>e in t?u(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,r=(t,e)=>{for(var s in e||(e={}))A.call(e,s)&&d(t,s,e[s]);if(k)for(var s of k(e))y.call(e,s)&&d(t,s,e[s]);return t},T=(t,e)=>h(t,p(e));import{c8 as w,cb as m,cc as c,V as l}from"./index.6be16f63.js";import{c as n}from"./Notifications.d579e4b1.js";const i=w(),E=m("tickets",{state:()=>({tickets:[],ticket:{},estados:[],countRepuestos:[]}),getters:{getTickets:t=>t.tickets,getTicket:t=>t.ticket,getEstados:t=>t.estados,getEstadosSelect:t=>t.estados.map(e=>T(r({},e),{label:e.tipo,value:e.id})),getCountRepuestoss:t=>t.countRepuestos},actions:{async getAllTickets(){const t=i.getToken;if(t=="")return this.tickets;const{data:e}=await c.get("/tickets",{headers:{Authorization:`Bearer ${t}`}});console.log("getAllTickets ACTIONS: ",e),this.tickets=e},async getTicketById(t){const e=i.getToken,{data:s}=await c.get(`/tickets/${t}`,{headers:{Authorization:`Bearer ${e}`}});console.log(s),this.cliente=s},async getCountRepuestos(){const t=await i.getToken,{data:e}=await c.get("tickets/countrepuestos/",{headers:{Authorization:`Bearer ${t}`}});console.log("getCountRepuestos: ",e),this.countRepuestos=e},async getEstadosTickets(){const t=await i.getToken,{data:e}=await c.get("tickets/estados/",{headers:{Authorization:`Bearer ${t}`}});console.log("getEstados: ",e),this.estados=e},async createTicket(t){const e=await i.getToken;await c.post("/tickets/add/",t,{headers:{Authorization:`Bearer ${e}`}}).then(s=>{console.log(s.data.id_ticket),n(`Ticket ${s.data.id_ticket} creado exitosamente!`,"positive"),console.log(s)}).catch(s=>{n(s.response.data,"negative"),console.log("Error",s.response.data.message)}),this.getAllTickets()},async updateTicket(t,e){const s=i.getToken;console.log("updateticket actions:",t,e),await c.patch(`tickets/update/${t}`,e,{headers:{Authorization:`Bearer ${s}`}}).then(a=>{n(`Ticket ${a.data.id_ticket} actualizado exitosamente!`,"positive"),console.log(a)}).catch(a=>{n(a.response.data.errors[0].message,"negative"),console.log("Error",a.response.data.message)}),this.getAllTickets()},async deleteTicket(t){const e=i.getToken;await c.delete(`tickets/delete/${t}`,{headers:{Authorization:`Bearer ${e}`}}).then(({data:s})=>{n(`Ticket ${s.id} eliminado exitosamente!`,"negative"),console.log("antes ",this.tickets),this.tickets=this.tickets.filter(a=>a.id_ticket!==t),console.log("despues",this.tickets),console.log("deleteTicket ACTIONS: ",s)}).catch(s=>{console.log("deleteTicket ACTIONS: ",s.response.data.message),n(s.response.data.message,"negative"),console.log("Error",s.response.data.message)})}}}),I=()=>{const t=E();return{getAllTickets:async()=>{await t.getAllTickets()},getTicketById:async o=>{await t.getTicketById(o)},createTicket:async o=>{console.log("createTicket ",o),await t.createTicket(o)},updateTicket:async(o,g)=>{console.log("updateTicket",o,g),await t.updateTicket(o,g)},deleteTicket:async o=>{console.log("deleteTicket useTicket: ",o),await t.deleteTicket(o)},getAllEstados:async()=>{await t.getEstadosTickets()},getAllCountRepuestos:async()=>{await t.getCountRepuestos()},getTickets:l(()=>t.getTickets),getTicket:l(()=>t.getTicket),getEstadosTicket:l(()=>t.getEstados),getCountAllRepuestos:l(()=>t.getCountRepuestoss),getEstadosSelects:l(()=>t.getEstadosSelect)}};export{I as u};
