var u=Object.defineProperty,p=Object.defineProperties;var m=Object.getOwnPropertyDescriptors;var g=Object.getOwnPropertySymbols;var A=Object.prototype.hasOwnProperty,y=Object.prototype.propertyIsEnumerable;var R=(e,o,t)=>o in e?u(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t,d=(e,o)=>{for(var t in o||(o={}))A.call(o,t)&&R(e,t,o[t]);if(g)for(var t of g(o))y.call(o,t)&&R(e,t,o[t]);return e},h=(e,o)=>p(e,m(o));import{c8 as w,ca as $,cb as n,V as c}from"./index.5404b0db.js";import{c as a}from"./Notifications.cd9f2894.js";const r=w(),k=$("roles",{state:()=>({roles:[],rol:{}}),getters:{getRoles:e=>e.roles,getRol:e=>e.rol,getRolesSelect:e=>e.roles.map(o=>h(d({},o),{label:o.nombre_rol,value:o.id_rol}))},actions:{async getAllRoles(){const e=await r.getToken;if(e=="")return this.Roles;const{data:o}=await n.get("/roles",{headers:{Authorization:`Bearer ${e}`}});console.log("getAllRoles ACTIONS: ",o),this.roles=o},async getRolById(e){const o=await r.getToken,{data:t}=await n.get(`/roles/${e}`,{headers:{Authorization:`Bearer ${o}`}});console.log(t),this.rol=t},async createRol(e){const o=r.getToken;await n.post("/roles/add/",e,{headers:{Authorization:`Bearer ${o}`}}).then(t=>{a(`Rol ${t.data.id_rol} creado exitosamente!`,"positive"),console.log(t)}).catch(t=>{a(t.response.data.errors[0].message,"negative"),console.log("Error",t.response.data.message)}),this.getAllRoles()},async updateRol(e,o){const t=await r.getToken;console.log("updateRol actions:",e,o),await n.put(`roles/update/${e}`,o,{headers:{Authorization:`Bearer ${t}`}}).then(l=>{a(`Rol ${l.data.id_rol} actualizado exitosamente!`,"positive"),console.log(l)}).catch(l=>{a(l.response.data.errors[0].message,"negative"),console.log("Error",l.response.data.message)}),this.getAllRoles()},async deleteRol(e){const o=await r.getToken;await n.delete(`roles/delete/${e}`,{headers:{Authorization:`Bearer ${o}`}}).then(({data:t})=>{a(`Rol ${t} eliminado exitosamente!`,"positive"),this.roles=this.roles.filter(l=>l.id_rol!==e),console.log("deleteRol ACTIONS: ",t)}).catch(t=>{console.log("deleteRol ACTIONS: ",t.response.data.message),a(t.response.data.message,"negative"),console.log("Error",t.response.data.message)}),this.getAllRoles()}}}),f=()=>{const e=k();return{getAllRoles:async()=>{await e.getAllRoles()},getRolById:async s=>{await e.getRolById(s)},createRol:async s=>{console.log("createRol ",s),await e.createRol(s)},updateRol:async(s,i)=>{console.log("updateRol",s,i),await e.updateRol(s,i)},deleteRol:async s=>{console.log("deleteRol useRol: ",s),await e.deleteRol(s)},getRoles:c(()=>e.getRoles),getRol:c(()=>e.getRol),getRolestoSelect:c(()=>e.getRolesSelect)}};export{f as u};
